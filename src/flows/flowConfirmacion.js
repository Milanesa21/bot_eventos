// flows/flowConfirmacion.js
const { addKeyword, EVENTS } = require("@bot-whatsapp/bot");
const { getPedidoActual, resetPedido } = require("../utils/resetPedido");
const flowPrincipal = require("./flowPrincipal");
const flowPago = require("./flowPago");

const flowConfirmacion = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { flowDynamic, state, gotoFlow }) => {
    const pedidoActual = await getPedidoActual(state);

    if (!pedidoActual.cart || pedidoActual.cart.length === 0) {
      await flowDynamic(
        "üõí Tu carrito est√° vac√≠o. Escribe 'menu' para empezar."
      );
      return gotoFlow(require("./flowPrincipal"));
    }

    const lines = ["üìù *Resumen de tu pedido:*", ""];
    let subtotalProductos = 0;

    pedidoActual.cart.forEach((item) => {
      lines.push(
        `${item.cantidad}x ${item.item} (${
          item.category
        }) ‚Äî $${item.total.toLocaleString("es-AR")}`
      );
      subtotalProductos += item.total;
    });

    // Verificar y calcular seguro de tabla
    const seguroTabla = pedidoActual.seguroTabla;
    let totalFinal = subtotalProductos;

    // Si hay seguro de tabla v√°lido (no null/undefined)
    if (seguroTabla !== null && seguroTabla !== undefined) {
      lines.push(`üîí Seguro de tabla: $${seguroTabla.toLocaleString("es-AR")}`);
      totalFinal += seguroTabla;
    }

    const adelanto = totalFinal * 0.5;
    const customerData = pedidoActual.customerData || {};

    lines.push(
      "",
      `*Subtotal Productos: $${subtotalProductos.toLocaleString("es-AR")}*`,
      `üí∞ *Total Final:* $${totalFinal.toLocaleString("es-AR")}`,
      "",
      "---",
      "üí≥ *Condiciones de Pago:*",
      `Adelanto requerido (50%): *$${adelanto.toLocaleString("es-AR")}*`,
      "Debe ser abonado con al menos 7 d√≠as de anticipaci√≥n",
      "---",
      "",
      "üë§ *Tus Datos*",
      `üë§ Nombre: ${customerData.name || "No especificado"}`,
      `üìû Tel: ${customerData.phone || "No especificado"}`,
      `üìÖ Fecha: ${customerData.date || "No especificado"}`,
      `‚è∞ Horario: ${customerData.time || "No especificado"}`,
      `üè† Direcci√≥n: ${customerData.address || "No especificado"}`,
      customerData.comments ? `üóíÔ∏è Comentarios: ${customerData.comments}` : "",
      "---",
      "",
      "¬øConfirmas este pedido y las condiciones?",
      "1Ô∏è‚É£ S√≠, confirmar pedido",
      "2Ô∏è‚É£ No, cancelar pedido"
    );

    await flowDynamic(lines.filter(Boolean).join("\n"));
  })
  .addAnswer(
    "Responde 1Ô∏è‚É£ para confirmar o 2Ô∏è‚É£ para cancelar",
    { capture: true },
    async (ctx, { flowDynamic, gotoFlow, fallBack, state }) => {
      const resp = ctx.body.trim().toLowerCase();

      if (resp === "1" || resp.includes("s√≠") || resp.includes("si")) {
        await flowDynamic(
          [
            "‚úÖ *¬°Pedido confirmado!*",
            "Gracias por confiar en *Ang√©lica Perniles*",
            "Elige tu m√©todo de pago:",
          ].join("\n")
        );
        await resetPedido(state);
        return gotoFlow(flowPago);
      }

      if (resp === "2" || resp.includes("no")) {
        await flowDynamic(
          [
            "‚ùå *Pedido cancelado*",
            "Todos los datos han sido eliminados",
            "Puedes comenzar de nuevo cuando quieras",
          ].join("\n")
        );
        await resetPedido(state);
        return gotoFlow(flowPrincipal);
      }

      await flowDynamic("‚ùå Respuesta no v√°lida. Por favor elige 1Ô∏è‚É£ o 2Ô∏è‚É£");
      return fallBack();
    }
  );

module.exports = flowConfirmacion;
